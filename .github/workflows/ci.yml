name: CI
on:
  push:
    branches:
      - '*'

jobs:

  docker:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
    - name: Setup buildx
      uses: docker/setup-buildx-action@v3
    - name: Log into registry ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Source versions
      run: |
        source builders/versions
        echo "QT_VER=${QT_VER}" >> $GITHUB_ENV
    - name: Build mediafx image
      uses: docker/build-push-action@v5
      with:
        context: builders/
        file: builders/Linux/Dockerfile
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        target: mediafx
        build-args: QT_VER=${{ env.QT_VER }}
        cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max

  linux:
    runs-on: ubuntu-22.04
    needs: docker
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Build/test mediaFX
      run: DOCKER_OPTS="-e MEDIAFX_TEST=--verbose" TARGET=opengl builders/Linux/docker-run.sh
    - name: Build/test mediaFX vulkan
      run: DOCKER_OPTS="-e MEDIAFX_TEST=--verbose" TARGET=vulkan builders/Linux/docker-run.sh
    - name: Upload Failed Artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failed-output-linux
        path: build/Linux/output

  macos:
    runs-on: macos-14
    env:
      XCODE_VER: "15.2"
    steps:
    - name: Brew
      run: brew install bash ffmpeg@4 ffmpeg@6 ffms2
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Xcode
      run: |
        sudo xcode-select -s "/Applications/Xcode_${XCODE_VER}.app"
    - name: Restore cached installation
      uses: actions/cache/restore@v4
      id: restore-cache
      with:
        path: build/Darwin/installed
        key: ${{ runner.os }}-${{ hashFiles('builders/versions') }}-${{ hashFiles('builders/Darwin/install-qt6.sh') }}-${{ hashFiles('builders/aqtinstall-requirements.txt') }}-${{ env.XCODE_VER }}
    - name: Build installation
      if: steps.restore-cache.outputs.cache-hit != 'true'
      run: |
        builders/Darwin/install-qt6.sh
    - name: Save cached installation
      uses: actions/cache/save@v3
      if: steps.restore-cache.outputs.cache-hit != 'true'
      with:
        path: build/Darwin/installed
        key: ${{ steps.restore-cache.outputs.cache-primary-key }}
    - name: Build/test mediaFX
      run: |
        PATH="$(brew --prefix ffmpeg@4)/bin:$PATH" MEDIAFX_TEST=--verbose builders/mediafx-build.sh
    - name: Upload Failed Artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failed-output-darwin
        path: build/Darwin/output

  lint:
    runs-on: ubuntu-22.04
    needs: docker
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: clang-format
      uses: jidicula/clang-format-action@v4.9.0
      with:
        clang-format-version: '15'
    - name: qmlformat
      run: builders/Linux/docker-run.sh bash -c 'cd /mediafx && qmlformat -i $(git ls-files "**/*.qml") && git diff --exit-code'
    - name: qmllint
      if: ${{ false }}
      run: builders/Linux/docker-run.sh bash -c 'cd /mediafx && qmllint --qmltypes build/Linux/Release/src/mediafx/qmldir $(git ls-files "**/*.qml")'
