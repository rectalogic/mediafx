name: CI
on:
  push:
    branches:
      - '*'

jobs:

  linux:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup buildx
      uses: docker/setup-buildx-action@v3
    - name: Log into registry ghcr.io
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build mediafx image
      uses: docker/build-push-action@v5
      with:
        context: builders/Linux
        tags: mediafx
        load: true
        target: mediafx
        cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max
    - name: Build mediafx-vulkan image
      uses: docker/build-push-action@v5
      with:
        context: builders/Linux
        tags: mediafx-vulkan
        load: true
        target: mediafx-vulkan  
        cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max
    - name: Install mediaFX
      run: sudo rm -rf build/Linux && DOCKER_OPTS="-e MEDIAFX_TEST=" builders/Linux/docker-run.sh /mediafx/builders/Linux/mediafx-build.sh
    - name: Install mediaFX vulkan
      run: sudo rm -rf build/Linux && DOCKER_OPTS="-e MEDIAFX_TEST=" TARGET=mediafx-vulkan builders/Linux/docker-run.sh /mediafx/builders/Linux/mediafx-build.sh
    - name: iwyu
      run: sudo rm -rf build/Linux && builders/Linux/docker-run.sh /mediafx/builders/Linux/iwyu.sh
    - name: qmlformat/lint
      run: builders/Linux/docker-run.sh bash -c "cd /mediafx && qmlformat $(git ls-files '**/*.qml') && qmllint --qmltypes build/Linux/src/mediafx/qmldir $(git ls-files '**/*.qml')"
    - name: Upload Failed Artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: failed-output-linux
        path: build/Linux/output

  macos:
    runs-on: macos-13
    env:
      XCODE_VER: "15.0"
    steps:
    - name: Upgrade bash
      run: brew install bash
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Xcode
      run: |
        sudo xcode-select -s "/Applications/Xcode_${XCODE_VER}.app"
    - name: Restore cached installation
      uses: actions/cache/restore@v3
      id: restore-cache
      with:
        path: build/Darwin/installed
        key: ${{ runner.os }}-${{ hashFiles('builders/versions') }}-${{ env.XCODE_VER }}
    - name: Build installation
      if: steps.restore-cache.outputs.cache-hit != 'true'
      run: |
        builders/Darwin/install-qt6.sh
    - name: Save cached installation
      uses: actions/cache/save@v3
      if: steps.restore-cache.outputs.cache-hit != 'true'
      with:
        path: build/Darwin/installed
        key: ${{ steps.restore-cache.outputs.cache-primary-key }}
    - name: Install mediaFX
      run: |
        MEDIAFX_TEST="-LE GPU" builders/Darwin/mediafx-build.sh
    - name: Upload Failed Artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: failed-output-darwin
        path: build/Darwin/output